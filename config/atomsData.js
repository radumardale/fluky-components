module.exports = /* eslint-disable */ [{"name":"Button","description":"The Button component.","props":{"kind":{"type":{"name":"enum","value":[{"value":"'plain'","computed":false},{"value":"'dominant'","computed":false},{"value":"'inferior'","computed":false},{"value":"'risk'","computed":false}]},"required":false,"description":"Type of button. Each `kind` represents a button type","defaultValue":{"value":"'plain'","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"On click action"},"compact":{"type":{"name":"bool"},"required":false,"description":"Compact Button size","defaultValue":{"value":"false","computed":false}}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport wrapInTheme from '../../wrapInTheme';\n\nimport styled from 'styled-components';\nimport { darken } from 'polished';\n\nconst borderColor = p => {\n  switch (p.kind) {\n    case 'dominant':\n      return darken(0.1, p.theme.colors.primaryColorDark);\n    case 'inferior':\n      return darken(0.1, p.theme.colors.primaryColorLight);\n    case 'risk':\n      return darken(0.1, p.theme.colors.accentColor);\n    default:\n      return p.theme.colors.primaryColorLight;\n  }\n};\n\nconst textColor = p => {\n  switch (p.kind) {\n    case 'dominant':\n      return p.theme.colors.primaryColorText;\n    case 'inferior':\n      return p.theme.colors.primaryTextColor;\n    case 'risk':\n      return p.theme.colors.primaryTextColor;\n    default:\n      return p.theme.colors.primaryColorDark;\n  }\n};\n\nconst background = p => {\n  switch (p.kind) {\n    case 'dominant':\n      return p.theme.colors.primaryColorDark;\n    case 'inferior':\n      return p.theme.colors.primaryColorLight;\n    case 'risk':\n      return p.theme.colors.accentColor;\n    default:\n      return p.theme.greys[0];\n  }\n};\n\nconst ButtonStyled = styled.button`\n\n  outline: none;\n  box-sizing: border-box;\n  box-shadow: 0px 0px 6px ${ p => p.theme.greys[8] };\n\n  &:hover {\n    box-shadow: 0px 0px 4px ${ p => p.theme.greys[8] };\n    color : ${ p => darken(0.05, textColor(p))};\n  }\n\n  &:active {\n    outline: none;\n    color : ${ p => darken(0.1, textColor(p))};\n    box-shadow: 0px 0px 2px ${ p => p.theme.greys[6] };\n  }\n\n  font-family: ${ p => p.theme.typo.family };\n  font-size: ${ p => p.compact ? p.theme.typo.size.small : p.theme.typo.size.normal };\n  padding : ${ p => p.compact ? `${p.theme.gap.XXXS} ${p.theme.gap.M} ${p.theme.gap.XXS}` : `${p.theme.gap.S} ${p.theme.gap.L}` };\n  color: ${ textColor };\n\n  cursor: pointer;\n\n  border-radius : 0.2rem;\n  border : 1px solid ${ borderColor };\n  background : ${ background };\n\n`;\n\n/** The Button component. */\nclass Button extends Component {\n  render() {\n    return (\n      <ButtonStyled {...this.props}>{this.props.children}</ButtonStyled>\n    );\n  }\n}\n\nButton.propTypes = {\n  /** Type of button. Each `kind` represents a button type */\n  kind : PropTypes.oneOf(['plain', 'dominant', 'inferior', 'risk']),\n  /** On click action */\n  onClick : PropTypes.func,\n  /** Compact Button size */\n  compact : PropTypes.bool\n};\n\nButton.defaultProps = {\n  kind : 'plain',\n  compact : false\n};\n\nexport default wrapInTheme(Button);\n","examples":[{"name":"compactButtonExample","description":"Compact Buttons variations example","code":"import React from 'react';\nimport DisplayPanel from '../displayPanel';\nimport Button from 'fluky-components/atoms/Button';\n\n/** Compact Buttons variations example */\nexport default function PainButtonExample() {\n  return (\n    <DisplayPanel>\n      <Button compact={true} >Click me</Button>\n      <Button compact={true}  kind=\"dominant\">Click me</Button>\n      <Button compact={true}  kind=\"inferior\">Click me</Button>\n      <Button compact={true}  kind=\"risk\">Click me</Button>\n    </DisplayPanel>\n  );\n}"},{"name":"defaultButtonExample","description":"Buttons variations example","code":"import React from 'react';\nimport DisplayPanel from '../displayPanel';\nimport Button from 'fluky-components/atoms/Button';\n\n/** Buttons variations example */\nexport default function PainButtonExample() {\n  return (\n    <DisplayPanel>\n      <Button>Click me</Button>\n      <Button kind=\"dominant\">Click me</Button>\n      <Button kind=\"inferior\">Click me</Button>\n      <Button kind=\"risk\">Click me</Button>\n    </DisplayPanel>\n  );\n}"}]},{"name":"Input","description":"The input component","props":{"value":{"type":{"name":"string"},"required":false,"description":"Input's value"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder text"},"onChange":{"type":{"name":"func"},"required":false,"description":"On change function"},"compact":{"type":{"name":"bool"},"required":false,"description":"Compact size input","defaultValue":{"value":"false","computed":false}}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport wrapInTheme from '../../wrapInTheme';\n\nconst InputStyled = styled.input`\n\n  font-family : ${ p => p.theme.typo.family };\n  font-size: ${ p => p.compact ? p.theme.typo.size.small : p.theme.typo.size.normal };\n\n  padding : ${ p => p.compact ? `${p.theme.gap.XXXS} ${p.theme.gap.XXXS}` : `${p.theme.gap.S} ${p.theme.gap.XS}`};\n`;\n\n/** The input component */\nclass Input extends Component {\n  render() {\n    return (\n      <InputStyled {...this.props}/>\n    );\n  }\n}\n\nInput.propTypes = {\n  /** Input's value */\n  value: PropTypes.string,\n  /** Placeholder text */\n  placeholder: PropTypes.string,\n  /** On change function  */\n  onChange: PropTypes.func,\n  /** Compact size input */\n  compact: PropTypes.bool\n};\n\nInput.defaultProps = {\n  compact: false\n};\n\nexport default wrapInTheme(Input);\n","examples":[{"name":"compactExample","description":"Compact Input with a placeholder example","code":"import React from 'react';\nimport Input from 'fluky-components/atoms/Input';\n\n/** Compact Input with a placeholder example */\nexport default function ExampleHelloWorld() {\n  return <Input\n    compact={true}\n    placeholder=\"text here...\"\n  />;\n}"},{"name":"defaultExample","description":"Default input example","code":"import React from 'react';\nimport Input from 'fluky-components/atoms/Input';\n\n/** Default input example */\nexport default function ExampleHelloWorld() {\n  return <Input />;\n}"},{"name":"placeholderExample","description":"Input with a placeholder example","code":"import React from 'react';\nimport Input from 'fluky-components/atoms/Input';\n\n/** Input with a placeholder example */\nexport default function ExampleHelloWorld() {\n  return <Input placeholder=\"text here...\"/>;\n}"}]},{"name":"Label","description":"A label component","props":{"compact":{"type":{"name":"bool"},"required":false,"description":"Compact label size"}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport wrapInTheme from '../../wrapInTheme';\n\nimport styled from 'styled-components';\n\nconst LabelStyled = styled.label`\n  font-size: ${ p => p.compact ? p.theme.typo.size.small : p.theme.typo.size.normal };\n  color: ${ p => p.theme.colors.secondaryTextColor };\n`;\n\n/** A label component */\nclass Label extends Component {\n  render() {\n    return (\n      <LabelStyled {...this.props}>{this.props.children}</LabelStyled>\n    );\n  }\n}\n\nLabel.propTypes = {\n  /** Compact label size */\n  compact : PropTypes.bool\n};\n\nexport default wrapInTheme(Label);\n","examples":[{"name":"compactExample","description":"Compact label example","code":"import React from 'react';\nimport Label from 'fluky-components/atoms/Label';\n\n/** Compact label example */\nexport default function CompactLabelExample() {\n  return <Label compact={true}>The label content</Label>;\n}"},{"name":"defaultExample","description":"Default label example","code":"import React from 'react';\nimport Label from 'fluky-components/atoms/Label';\n\n/** Default label example */\nexport default function ExampleHelloWorld() {\n  return <Label>The label content</Label>;\n}"}]}]