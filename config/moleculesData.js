module.exports = /* eslint-disable */ [{"name":"Checkbox","description":"A Checkbox component","props":{"checked":{"type":{"name":"bool"},"required":false,"description":"Checkbox value"},"onChange":{"type":{"name":"func"},"required":false,"description":"onChange checkbox value"},"labelText":{"type":{"name":"string"},"required":false,"description":"Checkbox label text"},"labelPosition":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"Label position","defaultValue":{"value":"'right'","computed":false}},"compact":{"type":{"name":"bool"},"required":false,"description":"Compact Checkbox size"}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '@atoms/Label';\n\nimport wrapInTheme from '../../wrapInTheme';\n\nimport styled from 'styled-components';\n\nconst CheckboxStyled = styled.div`\n  display : flex;\n  flex-direction : ${ p => p.labelPosition === 'right' ? 'row' : 'row-reverse' };\n  // font-size: ${ p => p.compact ? p.theme.typo.size.XS : p.theme.typo.size.normal };\n  // color: #546E7A;\n`;\n\nconst CheckboxInput = styled.input`\n\n`;\n\n/** A Checkbox component */\nclass Checkbox extends Component {\n\n  getIcon() {\n    const path = this.props.checked ? \"M19,19H5V5H15V3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V11H19M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\" : \"M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z\";\n    return <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" aria-labelledby=\"title\">\n      <path d={path} />\n    </svg>;\n  }\n\n  getLabel() {\n    return <p>Label</p>\n  }\n\n  render() {\n    return (\n      <CheckboxStyled>\n        <CheckboxInput\n          type=\"checkbox\"\n          checked={this.props.checked}\n        />\n        {this.getIcon()}\n        {this.getLabel()}\n      </CheckboxStyled>\n    );\n  }\n}\n\nCheckbox.propTypes = {\n  /** Checkbox value */\n  checked: PropTypes.bool,\n  /** onChange checkbox value */\n  onChange: PropTypes.func,\n  /** Checkbox label text */\n  labelText: PropTypes.string,\n  /** Label position */\n  labelPosition : PropTypes.oneOf(['left', 'right']),\n  /** Compact Checkbox size */\n  compact : PropTypes.bool\n};\n\nCheckbox.defaultProps = {\n  labelPosition : 'right'\n};\n\nexport default wrapInTheme(Checkbox);\n","examples":[]},{"name":"VerticalMenu","description":"# VerticalMenu\n\nVertical menu component. Displays vertically links with nested items.","props":{"items":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"menuItemType"}},"required":false,"description":"The list of menu items."}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport wrapInTheme from '../../wrapInTheme';\nimport menuItemType from '../../shapes/menuItemShape';\n\nimport styled, { keyframes } from 'styled-components';\n\nimport { isNil } from 'ramda';\n\nconst MenuList = styled.ul`\n  list-style-type : none;\n  margin          : ${ p => p.nested ?  0 : p.theme.gap.S } 0;\n  padding-left    : ${ p => p.nested ? p.theme.gap.S : 0 };\n\n`;\n\nconst MenuItem = styled.li`\n\n  // padding : ${ p => p.theme.gap.XXS} ${p => p.theme.gap.XXXS };\n\n`;\n\nconst slide = keyframes`\n  100% { left: 0; }\n`;\n\nconst Link = styled.a`\n\n  text-decoration : none;\n  display         : flex;\n  color           : ${ p => p.theme.colors.primaryColorDark };\n  font-size       : ${ p => p.theme.typo.size.normal };\n  border-bottom: 1px solid transparent;\n\n  transition: color .5s;\n\n  padding : ${ p => p.theme.gap.XXS} ${p => p.theme.gap.XXXS };\n\n  &:hover {\n    border-bottom: 1px solid ${ p => p.theme.colors.primaryColorDark };\n  }\n\n`;\n\n/**\n * # VerticalMenu\n *\n * Vertical menu component. Displays vertically links with nested items.\n*/\nclass VerticalMenu extends Component {\n\n  getNestedMenu = children => {\n    if (isNil(children) || children.length === 0) {\n      return null;\n    }\n    return (\n      <MenuList nested>\n        { children.map(this.getMenuItem) }\n      </MenuList>\n    );\n  }\n\n  getMenuItem = (item) => {\n\n    return (\n      <MenuItem key={`menu-${item.displayName}`}>\n        <Link href={item.link}>{item.displayName}</Link>\n        { this.getNestedMenu(item.children)}\n      </MenuItem>\n    );\n\n  }\n\n  render() {\n    return (\n      <MenuList>\n        { this.props.items.map(this.getMenuItem) }\n      </MenuList>\n    );\n  }\n}\n\nVerticalMenu.propTypes = {\n  /** The list of menu items.  */\n  items : PropTypes.arrayOf(menuItemType)\n};\n\nexport default wrapInTheme(VerticalMenu);\n","examples":[]}]